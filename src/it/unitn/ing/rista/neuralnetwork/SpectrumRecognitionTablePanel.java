/*
 * @(#)SpectrumRecognitionTablePanel.java created Mar 23, 2006 Casalino
 *
 * Copyright (c) 1996-2004 Luca Lutterotti All Rights Reserved.
 *
 * This software is the research result of Luca Lutterotti and it is 
 * provided as it is as confidential and proprietary information.  
 * You shall not disclose such Confidential Information and shall use 
 * it only in accordance with the terms of the license agreement you 
 * entered into with the author.
 *
 * THE AUTHOR MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. THE AUTHOR SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 */

package it.unitn.ing.rista.neuralnetwork;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.*;
import java.util.ArrayList;
import java.awt.*;


/**
 * The SpectrumRecognitionTablePanel is a class
 * <p/>
 * Description
 *
 * @author Luca Lutterotti
 * @version $Revision: 1.1 $, $Date: 2006/07/20 14:06:04 $
 * @since JDK1.1
 */

public class SpectrumRecognitionTablePanel extends JPanel {

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables

//  private JTable table;
  private RecogTableModel recogTableModel;

  /** Creates new form SpectrumRecognitionTablePanel */
  public SpectrumRecognitionTablePanel() {
      initComponents();

      // Show colors by rendering them in their own color.
      DefaultTableCellRenderer colorRenderer = new DefaultTableCellRenderer() {
    public void setValue(Object value) {
              if(value instanceof RecogResult) {
                  RecogResult rResult = (RecogResult)value;

                  if(rResult.percentage >= 90.0) setForeground(Color.red);
                  else if(rResult.percentage >= 80.0) setForeground(Color.blue);
                  else if(rResult.percentage > 50.0) setForeground(Color.green);
                  else setForeground(Color.black);

                  String tmpString = new String(""+rResult.percentage);

                  setText(tmpString.substring(0, tmpString.indexOf(".")+4)+" %");
              }
              else if(value instanceof NumberCategory) {
                  NumberCategory category = (NumberCategory)value;

                  setForeground(Color.black);
                  setText(category.getCategoryName());
              }
              else {
                  super.setValue(value);
              }
          }
      };

      // Create the JTable now
      recogTableModel = new RecogTableModel();
      JTable table = new JTable(recogTableModel);
      table.setRowSelectionAllowed(false);
      table.setColumnSelectionAllowed(false);
      table.setShowGrid(false);

      Class cClass = table.getColumnClass(0);
      table.setDefaultRenderer(cClass, colorRenderer);

      JScrollPane scrollPane = new JScrollPane(table);

      add(scrollPane);
  }

  public void addResult(NumberCategory numberCategory, double perc) {
      recogTableModel.add(new RecogResult(numberCategory, perc));
  }

  public void clear() {
      recogTableModel.clear();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents

      setLayout(new java.awt.GridLayout(1, 1));

  }//GEN-END:initComponents

  /**
   * class RecogResult
   *
   * special inner class that represents a recoginition result
   * that should be placed in the Table
   */
  class RecogResult {
      protected NumberCategory category;
      protected double percentage;

      public RecogResult(NumberCategory category, double percent) {
          this.category = category;
          this.percentage = percent;
      }
  }

  /**
   * RecogTableModel
   *
   * special inner class that represents the Table Model
   */
  class RecogTableModel extends AbstractTableModel {
      private final int COLUMN_COUNT = 2;
      private ArrayList resultList;

      public RecogTableModel() {
        resultList = new ArrayList();
      }

      public void add(RecogResult result) {
          resultList.add(result);
          fireTableStructureChanged();
      }

      public void clear() {
          resultList.clear();
          fireTableStructureChanged();
      }

      public String getColumnName(int col) {
          if(col == 0) return "Category";
          else if(col == 1) return "%";
          return "ERROR";
      }

      public Object getValueAt(int rowIndex, int columnIndex) {
          RecogResult rResult = (RecogResult)resultList.get(rowIndex);

          if(rResult != null) {
              if(columnIndex == 0) return rResult.category;
              else if(columnIndex == 1) return rResult;
          }
          return "ERROR";
      }

      public int getRowCount() {
          return resultList.size();
      }

      public int getColumnCount() {
          return COLUMN_COUNT;
      }

      /**
       * isCellEditable()
       *
       * we never allow editing of any cell
       */
      public boolean isCellEditable(int row, int col) {
          return false;
      }
  }

}
